name: "Configurar Repositorio"

on:
  # Solo ejecuta cuando el repositorio es creado desde una plantilla
  # 'created' es el único tipo de actividad que importa para esta sustitución
  repository_dispatch: 
  workflow_dispatch:
  push:
    branches:
      - main # o la rama principal

jobs:
  configure:
    runs-on: ubuntu-latest
    env:
      # Los secretos deben estar disponibles para este paso
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
    # Esta condición es crucial: Solo se ejecuta en el primer push después de ser creado
    # Aunque el evento "created" puede no ser directamente accesible, 
    # muchos usan una combinación de lógica para asegurar que solo corre una vez.
    # Una forma simple es forzar al usuario a hacer un push o usar un evento específico.
    # El patrón más seguro es usar un "despacho" o una condición de "commit inicial".
    
    steps:
      - name: Checkout del codigo
        uses: actions/checkout@v4
      # 1. Instalar Wrangler (necesario para el comando D1)
      - name: Instalar Wrangler
        run: npm install wrangler
      # 2. Obtener el nuevo nombre del repositorio
      - name: Obtener Nombre del Repositorio
        id: repo_name
        run: |
          # Extrae el nombre del repositorio (la parte despues del '/')
          NEW_REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "NEW_REPO_NAME=$NEW_REPO_NAME" >> $GITHUB_ENV
          echo "Nuevo Nombre del Proyecto: $NEW_REPO_NAME"
      # 3. Crear la Base de Datos D1
      - name: Crear Base de Datos D1 y Obtener ID
        id: create_d1
        run: |
          # 1. Crear la D1 y forzar la salida JSON para facil parseo
          OUTPUT=$(npx wrangler d1 create $NEW_REPO_NAME --json)
          
          # 2. Extraer el database_id del JSON generado
          DB_ID=$(echo $OUTPUT | jq -r '.result.database_id')
          echo "DB_ID=$DB_ID" >> $GITHUB_ENV
          echo "ID de la Base de Datos Creado: $DB_ID"
      # 2. Sustituir en los archivos
      - name: Sustituir marcador de posicion en archivos
        run: |
          PLACEHOLDER="YOUR-PROJECT-NAME"
          
          # Sustituir en wrangler.jsonc
          sed -i "s/$PLACEHOLDER/${{ env.NEW_REPO_NAME }}/g" wrangler.jsonc

          # Sustituir en package.json
          sed -i "s/$PLACEHOLDER/${{ env.NEW_REPO_NAME }}/g" package.json
          # Sustituir en package-lock.json
          sed -i "s/$PLACEHOLDER/${{ env.NEW_REPO_NAME }}/g" package-lock.json          
          # Sustitución del Nombre de la DB
          sed -i "s/DB_NAME/${{ env.NEW_REPO_NAME }}/g" wrangler.jsonc

          # Sustitución del ID de la DB
          sed -i "s/DB_ID/${{ env.DB_ID }}/g" wrangler.jsonc
          
          echo "Sustitucion completada."

      # 3. Commit y Push de los cambios
      - name: Commit de los cambios de configuracion
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat: Inicializar proyecto y configurar D1 database ID"
          branch: ${{ github.ref_name }} # Usa la rama actual

      # 4. Eliminar el Action para que no se ejecute más
      - name: Eliminar el Action de configuracion unica
        run: |
          rm .github/workflows/setup.yml
          rm .github/readme.md
      - name: Commit de la eliminacion
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: Remover la accion de configuracion inicial"
          branch: ${{ github.ref_name }}
          file_pattern: .github/workflows/setup.yml
